var e;!function(e){e.Shared="shared",e.Transient="transient",e.Scoped="scoped"}(e||(e={}));class t{constructor(e){this.spec=e,this.services=new Map,this.loading=new Set;let t=this.resolveService.bind(this);this.spec.middlewares.forEach((e=>{t=e(t)})),this.resolveService=t}get(e){return this.resolveService(e)}resolveService(t){if(!this.spec.services.has(t))throw new c(t);switch(this.spec.services.get(t).type.name){case e.Transient:return this.resolveServiceTransient(t);case e.Scoped:return this.resolveServiceScoped(t);case e.Shared:return this.resolveServiceShared(t)}}resolveServiceShared(e){if(this.services.has(e))return this.services.get(e);const t=this.createService(e);return this.services.set(e,t),this.executeInjection(e,t),t}resolveServiceTransient(e){const t=this.createService(e);return this.executeInjection(e,t),t}resolveServiceScoped(e){const t=this.resolveContext(e);this.services.has(e)||this.services.set(e,new WeakMap);const s=this.services.get(e);if(s.has(t))return s.get(t);const r=this.createService(e);return s.set(t,r),this.executeInjection(e,r),r}has(e){return this.services.has(e)}createService(e){if(this.loading.has(e))throw new o(e,[...this.loading.values(),e]);const t=this.spec.services.get(e),{factory:s}=t;this.loading.add(e);const r="function"==typeof s?s(this):s.create(this);return this.loading.delete(e),r}executeInjection(e,t){const s=this.spec.services.get(e),{injector:r}=s;r&&("function"!=typeof r?r.inject(t,this):r(t,this))}resolveContext(e){const t=this.spec.services.get(e),{contextResolver:s}=t.type;return"function"==typeof s?s(this):s.resolveContext(this)}}const s=e=>new t(e);class r{constructor(e){this.factory=e,this.shared()}shared(){return this.type={name:e.Shared},this}transient(){return this.type={name:e.Transient},this}scoped(t){return this.type={name:e.Scoped,contextResolver:t},this}withInjector(e){return this.injector=e,this}getServiceDefinition(){return{type:this.type,factory:this.factory,injector:this.injector}}}class i{constructor(){this.defBuilders=new Map,this.middlewares=[]}set(e,t){const s=new r(t);return this.defBuilders.set(e,s),s}addMiddleware(...e){return this.middlewares.push(...e),this}getServiceSpec(){const e=new Map;return this.defBuilders.forEach(((t,s)=>{e.set(s,t.getServiceDefinition())})),{services:e,middlewares:this.middlewares}}}const n=()=>new i;class c extends Error{constructor(e){super(`unknown service "${String(e)}"`),this.id=e,this.name="UnknownServiceError"}}class o extends Error{constructor(e,t){super(`circular dependency detected: ${t.map(String).join(" -> ")}`),this.id=e,this.referenceChain=t,this.name="ServiceCircularReferenceError"}}export{o as ServiceCircularReferenceError,t as ServiceContainerImpl,r as ServiceDefinitionBuilderImpl,i as ServiceSpecBuilderImpl,e as ServiceType,c as UnknownServiceError,s as createServiceContainer,n as createServiceSpecBuilder};
//# sourceMappingURL=vorarbeiter.esm.min.js.map
