{"version":3,"file":"vorarbeiter.umd.min.js","sources":["../es/index.js"],"sourcesContent":["export var ServiceType;\n(function (ServiceType) {\n    ServiceType[\"Shared\"] = \"shared\";\n    ServiceType[\"Transient\"] = \"transient\";\n    ServiceType[\"Scoped\"] = \"scoped\";\n})(ServiceType || (ServiceType = {}));\nexport class ServiceContainerImpl {\n    constructor(spec) {\n        this.spec = spec;\n        this.services = new Map();\n        this.loading = new Set();\n        let resolveService = this.resolveService.bind(this);\n        this.spec.middlewares.forEach(mw => {\n            resolveService = mw(resolveService);\n        });\n        this.resolveService = resolveService;\n    }\n    get(id) {\n        return this.resolveService(id);\n    }\n    resolveService(id) {\n        if (!this.spec.services.has(id)) {\n            throw new UnknownServiceError(id);\n        }\n        const definition = this.spec.services.get(id);\n        // eslint-disable-next-line default-case\n        switch (definition.type.name) {\n            case ServiceType.Transient:\n                return this.resolveServiceTransient(id);\n            case ServiceType.Scoped:\n                return this.resolveServiceScoped(id);\n            case ServiceType.Shared:\n                return this.resolveServiceShared(id);\n        }\n    }\n    resolveServiceShared(id) {\n        if (this.services.has(id)) {\n            return this.services.get(id);\n        }\n        const service = this.createService(id);\n        this.services.set(id, service);\n        this.executeInjection(id, service);\n        return service;\n    }\n    resolveServiceTransient(id) {\n        const service = this.createService(id);\n        this.executeInjection(id, service);\n        return service;\n    }\n    resolveServiceScoped(id) {\n        const ctx = this.resolveContext(id);\n        if (!this.services.has(id)) {\n            this.services.set(id, new WeakMap());\n        }\n        const ctxMap = this.services.get(id);\n        if (ctxMap.has(ctx)) {\n            return ctxMap.get(ctx);\n        }\n        const service = this.createService(id);\n        ctxMap.set(ctx, service);\n        this.executeInjection(id, service);\n        return service;\n    }\n    has(id) {\n        return this.services.has(id);\n    }\n    createService(id) {\n        if (this.loading.has(id)) {\n            throw new ServiceCircularReferenceError(id, [...this.loading.values(), id]);\n        }\n        const definition = this.spec.services.get(id);\n        const { factory } = definition;\n        this.loading.add(id);\n        const service = typeof factory === \"function\" ? factory(this) : factory.create(this);\n        this.loading.delete(id);\n        return service;\n    }\n    executeInjection(id, service) {\n        const definition = this.spec.services.get(id);\n        const { injector } = definition;\n        if (!injector) {\n            return;\n        }\n        if (typeof injector === \"function\") {\n            injector(service, this);\n            return;\n        }\n        injector.inject(service, this);\n    }\n    resolveContext(id) {\n        const definition = this.spec.services.get(id);\n        const { contextResolver } = definition.type;\n        return typeof contextResolver === \"function\" ? contextResolver(this) : contextResolver.resolveContext(this);\n    }\n}\nexport const createServiceContainer = (spec) => new ServiceContainerImpl(spec);\nexport class ServiceDefinitionBuilderImpl {\n    constructor(factory) {\n        this.factory = factory;\n        this.shared();\n    }\n    shared() {\n        this.type = { name: ServiceType.Shared };\n        return this;\n    }\n    transient() {\n        this.type = { name: ServiceType.Transient };\n        return this;\n    }\n    scoped(contextResolver) {\n        this.type = { name: ServiceType.Scoped, contextResolver };\n        return this;\n    }\n    withInjector(injector) {\n        this.injector = injector;\n        return this;\n    }\n    getServiceDefinition() {\n        return {\n            type: this.type,\n            factory: this.factory,\n            injector: this.injector\n        };\n    }\n}\nexport class ServiceSpecBuilderImpl {\n    constructor() {\n        this.defBuilders = new Map();\n        this.middlewares = [];\n    }\n    set(id, factory) {\n        const definitionBuilder = new ServiceDefinitionBuilderImpl(factory);\n        this.defBuilders.set(id, definitionBuilder);\n        return definitionBuilder;\n    }\n    addMiddleware(...middlewares) {\n        this.middlewares.push(...middlewares);\n        return this;\n    }\n    getServiceSpec() {\n        const services = new Map();\n        this.defBuilders.forEach((definitionBuilder, id) => {\n            services.set(id, definitionBuilder.getServiceDefinition());\n        });\n        return {\n            services,\n            middlewares: this.middlewares\n        };\n    }\n}\nexport const createServiceSpecBuilder = () => new ServiceSpecBuilderImpl();\nexport class UnknownServiceError extends Error {\n    constructor(id) {\n        super(`unknown service \"${String(id)}\"`);\n        this.id = id;\n        this.name = \"UnknownServiceError\";\n    }\n}\nexport class ServiceCircularReferenceError extends Error {\n    constructor(id, referenceChain) {\n        super(`circular dependency detected: ${referenceChain.map(String).join(\" -> \")}`);\n        this.id = id;\n        this.referenceChain = referenceChain;\n        this.name = \"ServiceCircularReferenceError\";\n    }\n}\n//# sourceMappingURL=index.js.map"],"names":["ServiceType","exports","ServiceContainerImpl","constructor","spec","this","services","Map","loading","Set","resolveService","bind","middlewares","forEach","mw","get","id","has","UnknownServiceError","type","name","Transient","resolveServiceTransient","Scoped","resolveServiceScoped","Shared","resolveServiceShared","service","createService","set","executeInjection","ctx","resolveContext","WeakMap","ctxMap","ServiceCircularReferenceError","values","definition","factory","add","create","delete","injector","inject","contextResolver","ServiceDefinitionBuilderImpl","shared","transient","scoped","withInjector","getServiceDefinition","ServiceSpecBuilderImpl","defBuilders","definitionBuilder","addMiddleware","push","getServiceSpec","Error","super","String","referenceChain","map","join"],"mappings":"mPACA,IAAWA,EADYC,EAAAD,iBAAA,GACZA,EAIRA,gBAAgBA,EAAAA,YAAc,CAAE,IAHX,OAAI,SACxBA,EAAuB,UAAI,YAC3BA,EAAoB,OAAI,SAErB,MAAME,EACT,WAAAC,CAAYC,GACRC,KAAKD,KAAOA,EACZC,KAAKC,SAAW,IAAIC,IACpBF,KAAKG,QAAU,IAAIC,IACnB,IAAIC,EAAiBL,KAAKK,eAAeC,KAAKN,MAC9CA,KAAKD,KAAKQ,YAAYC,SAAQC,IAC1BJ,EAAiBI,EAAGJ,EAAe,IAEvCL,KAAKK,eAAiBA,CACzB,CACD,GAAAK,CAAIC,GACA,OAAOX,KAAKK,eAAeM,EAC9B,CACD,cAAAN,CAAeM,GACX,IAAKX,KAAKD,KAAKE,SAASW,IAAID,GACxB,MAAM,IAAIE,EAAoBF,GAIlC,OAFmBX,KAAKD,KAAKE,SAASS,IAAIC,GAEvBG,KAAKC,MACpB,KAAKpB,EAAWA,YAACqB,UACb,OAAOhB,KAAKiB,wBAAwBN,GACxC,KAAKhB,EAAWA,YAACuB,OACb,OAAOlB,KAAKmB,qBAAqBR,GACrC,KAAKhB,EAAWA,YAACyB,OACb,OAAOpB,KAAKqB,qBAAqBV,GAE5C,CACD,oBAAAU,CAAqBV,GACjB,GAAIX,KAAKC,SAASW,IAAID,GAClB,OAAOX,KAAKC,SAASS,IAAIC,GAE7B,MAAMW,EAAUtB,KAAKuB,cAAcZ,GAGnC,OAFAX,KAAKC,SAASuB,IAAIb,EAAIW,GACtBtB,KAAKyB,iBAAiBd,EAAIW,GACnBA,CACV,CACD,uBAAAL,CAAwBN,GACpB,MAAMW,EAAUtB,KAAKuB,cAAcZ,GAEnC,OADAX,KAAKyB,iBAAiBd,EAAIW,GACnBA,CACV,CACD,oBAAAH,CAAqBR,GACjB,MAAMe,EAAM1B,KAAK2B,eAAehB,GAC3BX,KAAKC,SAASW,IAAID,IACnBX,KAAKC,SAASuB,IAAIb,EAAI,IAAIiB,SAE9B,MAAMC,EAAS7B,KAAKC,SAASS,IAAIC,GACjC,GAAIkB,EAAOjB,IAAIc,GACX,OAAOG,EAAOnB,IAAIgB,GAEtB,MAAMJ,EAAUtB,KAAKuB,cAAcZ,GAGnC,OAFAkB,EAAOL,IAAIE,EAAKJ,GAChBtB,KAAKyB,iBAAiBd,EAAIW,GACnBA,CACV,CACD,GAAAV,CAAID,GACA,OAAOX,KAAKC,SAASW,IAAID,EAC5B,CACD,aAAAY,CAAcZ,GACV,GAAIX,KAAKG,QAAQS,IAAID,GACjB,MAAM,IAAImB,EAA8BnB,EAAI,IAAIX,KAAKG,QAAQ4B,SAAUpB,IAE3E,MAAMqB,EAAahC,KAAKD,KAAKE,SAASS,IAAIC,IACpCsB,QAAEA,GAAYD,EACpBhC,KAAKG,QAAQ+B,IAAIvB,GACjB,MAAMW,EAA6B,mBAAZW,EAAyBA,EAAQjC,MAAQiC,EAAQE,OAAOnC,MAE/E,OADAA,KAAKG,QAAQiC,OAAOzB,GACbW,CACV,CACD,gBAAAG,CAAiBd,EAAIW,GACjB,MAAMU,EAAahC,KAAKD,KAAKE,SAASS,IAAIC,IACpC0B,SAAEA,GAAaL,EAChBK,IAGmB,mBAAbA,EAIXA,EAASC,OAAOhB,EAAStB,MAHrBqC,EAASf,EAAStB,MAIzB,CACD,cAAA2B,CAAehB,GACX,MAAMqB,EAAahC,KAAKD,KAAKE,SAASS,IAAIC,IACpC4B,gBAAEA,GAAoBP,EAAWlB,KACvC,MAAkC,mBAApByB,EAAiCA,EAAgBvC,MAAQuC,EAAgBZ,eAAe3B,KACzG,EAGE,MAAMwC,EACT,WAAA1C,CAAYmC,GACRjC,KAAKiC,QAAUA,EACfjC,KAAKyC,QACR,CACD,MAAAA,GAEI,OADAzC,KAAKc,KAAO,CAAEC,KAAMpB,EAAWA,YAACyB,QACzBpB,IACV,CACD,SAAA0C,GAEI,OADA1C,KAAKc,KAAO,CAAEC,KAAMpB,EAAWA,YAACqB,WACzBhB,IACV,CACD,MAAA2C,CAAOJ,GAEH,OADAvC,KAAKc,KAAO,CAAEC,KAAMpB,EAAAA,YAAYuB,OAAQqB,mBACjCvC,IACV,CACD,YAAA4C,CAAaP,GAET,OADArC,KAAKqC,SAAWA,EACTrC,IACV,CACD,oBAAA6C,GACI,MAAO,CACH/B,KAAMd,KAAKc,KACXmB,QAASjC,KAAKiC,QACdI,SAAUrC,KAAKqC,SAEtB,EAEE,MAAMS,EACT,WAAAhD,GACIE,KAAK+C,YAAc,IAAI7C,IACvBF,KAAKO,YAAc,EACtB,CACD,GAAAiB,CAAIb,EAAIsB,GACJ,MAAMe,EAAoB,IAAIR,EAA6BP,GAE3D,OADAjC,KAAK+C,YAAYvB,IAAIb,EAAIqC,GAClBA,CACV,CACD,aAAAC,IAAiB1C,GAEb,OADAP,KAAKO,YAAY2C,QAAQ3C,GAClBP,IACV,CACD,cAAAmD,GACI,MAAMlD,EAAW,IAAIC,IAIrB,OAHAF,KAAK+C,YAAYvC,SAAQ,CAACwC,EAAmBrC,KACzCV,EAASuB,IAAIb,EAAIqC,EAAkBH,uBAAuB,IAEvD,CACH5C,WACAM,YAAaP,KAAKO,YAEzB,EAGE,MAAMM,UAA4BuC,MACrC,WAAAtD,CAAYa,GACR0C,MAAM,oBAAoBC,OAAO3C,OACjCX,KAAKW,GAAKA,EACVX,KAAKe,KAAO,qBACf,EAEE,MAAMe,UAAsCsB,MAC/C,WAAAtD,CAAYa,EAAI4C,GACZF,MAAM,iCAAiCE,EAAeC,IAAIF,QAAQG,KAAK,WACvEzD,KAAKW,GAAKA,EACVX,KAAKuD,eAAiBA,EACtBvD,KAAKe,KAAO,+BACf,0KArEkChB,GAAS,IAAIF,EAAqBE,8BAuDjC,IAAM,IAAI+C"}